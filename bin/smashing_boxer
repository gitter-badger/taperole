#!/usr/bin/env ruby

$LOAD_PATH << File.join(__dir__, '..', 'lib')

require 'optparse'
require 'ostruct'
require 'smashing_boxer'
require 'smashing_boxer/arg_parser'

options = OpenStruct.new
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: smashing_boxer <module> <action> [options]"

  opts.on("-v", "--[no-]verbose", "Be loud") {|v| options.verbose = v}

  opts.on("-i", "--inventory [INVENTORY_FILE]",
    String, "Do actions with the given inventory file") do |i|
      options.inventory_file = i
    end

  opts.on('-n', "--name [NAME]",
    String, "The name of the machine to operate on") do |n|
      options.name = n
    end

  opts.on('-p', "--port [PORT]",
    Integer, "The port that the machine is listening on for SSH connections") do |p|
      options.port = p
    end

  opts.on("-h", "--help", "Show this help") do
    STDERR.puts opts
    exit 0
  end

  opts.separator ''
  opts.separator "MODULES"
  SmashingBoxer.registered_modules.values.each do |exec_module|
    opts.separator "  #{exec_module.name.to_s.upcase}"
    exec_module.klass.actions.values.each do |action|
      opts.separator "    #{action.name}: #{action.description}"
    end
  end
end

opt_parser.parse! ARGV

module_name = ARGV.shift.to_sym
action_name = ARGV.shift.to_sym

exec_module = SmashingBoxer.registered_modules[module_name]

if exec_module and action_name
  begin
    exec_module.klass.new(options).execute_action(action_name)
  rescue SmashingBoxer::InvalidAction,
    SmashingBoxer::ActionError, SmashingBoxer::UnspecifiedOption => e

    STDERR.puts(e.message)
    exit 2
  end
else
  STDERR.puts opt_parser.help
  exit 1
end
