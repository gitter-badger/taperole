#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

class SmashingBoxer
  class Action < Struct.new(:name, :opts); end
  class InvalidAction < StandardError; end
  ACTIONS = {
    'everything' => :do_it_all,
    'deploy' => :deploy_only,
    'restart_unicorn' => :restart_unicorn,
    'configure_dj_runner' => :configure_dj_runner,
    'restart_dj_runner' => :restart_dj_runner
  }

  def self.actions
    @actions
  end

  def self.action(name, opts = '', doc = '')
    @actions ||= Hash.new
    @actions[name.to_sym] = opts
  end

  action :configure_dj_runner, '-tconfigure_dj_runner'
  action :configure_dj_runner, '-tconfigure_dj_runner -e force_dj_runner_restart=true'
  action :reload_unicorn, '-t unicorn_restart -e force_unicorn_restart=true'
  action :restart_unicorn, '-t unicorn_restart -e force_unicorn_reload=true'
  action :bundle, '-t bundle -e force_bundle=true'
  action :deploy, '-tdeploy'
  action :everything, ''

  def actions
    self.class.actions
  end

  def initialize(opts)
    ENV['SMASHING_BOXER_PATH'] = File.join(__dir__, '../')
    @opts = opts
  end

  def execute_action(action)
    action = action.to_sym
    unless actions.include?(action)
      raise InvalidAction, "#{action} is not a valid action!"
    end

    unless system("ansible-playbook --version")
      raise InvalidAction, "ansible-playbook must be on your PATH to use this tool"
    end

    ansible(actions[action])
  end

  protected
  attr_reader :opts

  def ansible(cmd_str = '')
    cmd = "ansible-playbook -i #{inventory_file} site.yml #{cmd_str}"
    STDERR.puts "Executing: #{cmd}" if opts.verbose
    Kernel.exec(cmd)
  end

  def inventory_file
    opts.inventory_file || 'test_hosts'
  end
end

options = OpenStruct.new
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: smashing_boxer <action> [options]"

  opts.on("-v", "--[no-]verbose", "Be loud") {|v| options.verbose = v}
  opts.on("-h", "--help", "Show this help") do
    STDERR.puts opts
    exit 0
  end

  opts.on("-i", "--inventory [INVENTORY_FILE]",
    String, "Do actions with the given inventory file") do |i|
      options.inventory_file = i
    end

  opts.separator ''
  opts.separator "ACTIONS"
  opts.separator "  everything:  Provision and deploy all aspects of the application"
  opts.separator "  configure_dj_runner:  Set up the Delayed Job runner"
end
opt_parser.parse! ARGV
action = ARGV.shift

if action
  begin
    SmashingBoxer.new(options).execute_action(action)
  rescue SmashingBoxer::InvalidAction => e
    STDERR.puts(e.message)
    exit 2
  end
else
  STDERR.puts opt_parser.help
  exit 1
end
